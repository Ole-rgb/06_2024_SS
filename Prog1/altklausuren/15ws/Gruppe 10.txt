
// 1a)  Prüfen ob ein string t in einem string s vorkommt. string t kann zudem m '?' als wildchar (beliebiger character) erhalten.
//      Bei den Testfällen gab es zudem den Fall dass der String '' geprüft werden musste - mit dem erwarteten Ergebnis true.
//      '' Ist die binäre Null, der String ist damit nicht leer... Dazu die Abfrage t[0] == '\0'

bool contains(string s, string t) {

    int pos = 0;
    
    for (int i = 0; i < s_length(s); i++) {
        
        if (pos == s_length(t) - 1 || t[0] == '\0') {
            return true;
        }
        
        if (s[i] == t[pos] || t[pos] == '?') {
            pos++;
        } else {
            pos = 0;
        }
        
    }
    
    
    return false;
}




/* 1b)  (Bonus)
 Gegeben
bool lastCharacterInStringIsQuestionMark(string s){
    return (s[s_length(s)] == '?');
}
*/
 
// Nachher (Es musste also nur ein -1 eingefügt werden...) => Bonuspunkte sammeln lohnt nicht
bool lastCharacterInStringIsQuestionMark(string s){
    return (s[s_length(s)-1] == '?');
}





// 2)


class Node{
    Node right;
    Node left;
    int value;
    
### a)
    
    public int sum(){
        int ret = this.value;
        if(this.left!=null)
            ret += this.left.sum();
        if(this.right!=null)
            ret += this.right.sum();
        return ret;
    }
    
### b)
    
    public int maxSubTree(){
        int max = this.sum();
        if(this.left != null) {
            int maxLeft = this.left.maxSubTree();
            if(max < maxLeft)
                max = maxLeft;
        }
        if(this.right != null) {
            int maxRight = this.right.maxSubTree();
            if(max < maxRight)
                max = maxRight;
        }
        return max;
    }
    
    
}

